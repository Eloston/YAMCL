YAMCL is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

YAMCL is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with YAMCL.  If not, see {http://www.gnu.org/licenses/}.

***END OF LICENSE NOTICE***

====================================
The List of Disorganized Information
====================================

-Choose location of .minecraft directory
    -Perhaps to extract information?
    -I am not sure what good this will do
-Independant from default Minecraft launcher files
    -See "dataspecs"
-Option to download all resource files
    -Not sure how this will work

-Minecrafts can be downloaded from Mojang
    -Original JSON files for particular minecrafts or all versions available will not be stored
    -Menu will be like PlayOnLinux's Wine installing/uninstalling menu

-Libraries and natives will go into a certain directory
    -Mojang and custom libraries can be shared across any Minecraft
    -When new minecraft is downloaded all dependant libraries will be downloaded as well

-Library manager for custom libraries
    -Will be a list with names
-Libraries will be deleted when no Minecraft depends on it by default

-Multiple Minecrafts support
    -Used for mods and etc
    -Each has their own config
        -Libraries to use (custom or mojang version)
        -Custom command line options

-At startup, launcher will check directory structure and check to see if important json files are present (index.json, and others)
    -The launcher will fail to initialize if there are errors present
-Lancher will NOT check the indexes for consistency with the data at startup. This will have to be manually invoked

-Each profile will contain the data that Minecraft creates and Minecraft versions that are associated to the profile that are able to be chosen to launch with.
    -Unknown how to divide up resources (sounds, etc) to save disk space
        -Will I even do this?

-Natives will be linked to their associated library. When a library is loaded, the natives are loaded as well.

-Check to make sure the minimum launcher version isn't greater than the coded version.

-Going to ignore synced field

-Need to implement library rules (in every binary JSON file)
    -An optional field used to describe what os and even specific versions will load or not load a certain library
    -Do evaluation of rules and load libraries during the launch of Minecraft
        -If rules field is not present for a library, assume to load on all systems
        -If the rule field list is present, loop through all items with this procedure:
            -If the action is allow
                -If the os field is present
                    -Check os name and allow for that os
                -Otherwise allow on all systems
            -If the action is disallow
                -If the os field is present
                    -Check os name and disallow for that os. This rules over any allow statement
                -Otherwise disallow on all systems

-Multiple languages??? (Far future)

-Logging, because logging is convenient

-Ability to modify the JSON file that accompanies a JAR of a custom binary
    -Implement in future, if at all
        -Doubting implementation because it doesn't keep the launcher simple
        -JSON is user-friendly anyway
    -Modify libraries used
    -Modify main class launched
    -Modify arguments

-Need to implement passable arguments:
auth_username # Is the same as player name, otherwise it is the email
auth_player_name # Case correct name in-game
auth_uuid # Needed for Premium accounts?
auth_session # Needed for Premium accounts?
auth_access_token # Needed for Premium accounts?
profile_name # Pass in name of the profile here
version_name # Version of the Minecraft being launched. Pass in "basename" parameter from JSON file
game_directory # Pass in absolute path to profile data directory
game_assets # The same thing as game_directory with the assets directory specified
