-Choose location of .minecraft directory
-Independant from default Minecraft launcher files
-Option to download all resource files

-Minecrafts can be downloaded from Mojang
    -Original JSON files for particular minecrafts or all versions available will not be stored
    -Menu will be like PlayOnLinux's Wine installing/uninstalling menu

-Libraries and natives will go into a certain directory
    -Mojang and custom libraries can be shared across any Minecraft
    -When new minecraft is downloaded all dependant libraries will be downloaded as well

-Library manager for custom libraries
    -Will be a list with names
-Libraries will be deleted when no Minecraft depends on it by default

-Multiple Minecrafts support
    -Used for mods and etc
    -Each has their own config
        -Libraries to use (custom or mojang version)
        -Custom command line options

-At startup, launcher will check directory structure and check to see if important json files are present (index.json, and others)
-Lancher will NOT check the indexes to see if they're up-to-date. Instead that will be a separate feature.

-Each instance will contain the data that Minecraft creates and Minecraft versions that are associated to the instance that are able to be chosen to launch with.
    -Unknown how to divide up resources (sounds, etc) to save disk space

-Natives will be linked to their associated library. When a library is loaded, the natives are loaded as well.

-Check to make sure the minimum launcher version isn't greater than the coded version.

-Going to ignore synced field

-Need to implement library rules
    -An optional field used to describe what os and even specific versions will load or not load a certain library
    -Do evaluation of rules and load libraries during the launch of Minecraft
        -If rules field is not present for a library, assume to load on all systems
        -If the rule field list is present, loop through all items with this procedure:
            -If the action is allow
                -If the os field is present
                    -Check os name and allow for that os
                -Otherwise allow on all systems
            -If the action is disallow
                -If the os field is present
                    -Check os name and disallow for that os. This rules over any allow statement
                -Otherwise disallow on all systems

-Multiple languages??? (Far future)

-Need to implement passable arguments:
auth_username # Is the same as player name, otherwise it is the email
auth_player_name # Case correct name in-game
auth_uuid # Needed for Premium accounts?
auth_session # Needed for Premium accounts?
auth_access_token # Needed for Premium accounts?
profile_name # Pass in name of the instance here
version_name # Version of the Minecraft being launched. Pass in "basename" parameter from JSON file
game_directory # Pass in absolute path to instance data directory
game_assets # The same thing as game_directory with the assets directory specified

---Directory Structure:
YAMCL_data/
    lib/
        # Libraries go here. Mojang form: com.blah.blah, org.blah.blah, net.blah.blah, etc
        # Custom libraries can go here too
        (LIBRARY_NAME_HERE)/
            natives/
                # Natives go in here
            jar/
                # Library jar files will go in here
        index.json # Contains list of libraries
    bin/
        vanilla/
            # Minecrafts from Mojang will go here (releases and snapshots)
            (VERSION_NAME_HERE)/
                (VERSION_NAME_HERE).json # Contains info about the minecraft version (libraries used, class to run, etc)
                (VERSION_NAME_HERE).jar # The actual minecraft binary
        custom/
            # Custom versions go here (modded versions)
            (VERSION_NAME_HERE)/
                # Same as vanilla Minecrafts
        index.json # List of modded and vanilla Minecrafts
        versions.json # List of Minecraft versions on the Mojang servers
    instances/
        (INSTANCE_NAME_HERE)/
            data/
                # Minecraft data goes here, like texturepacks, resources, saves, etc
            info.json

Library JSON format:
[
{
"name": "domain.blah.blah:blah_1.23", # Will be the name reported by Minecraft json files
"path": "domain.blah.blah-blah_1.23" # Path to library file and natives (the lib and natives directories)
},
# Keep repeating
]

Binary JSON format:
[
{
"id": "99w99z", # Version of snapshot or release for vanilla, or name of modded version. Used to name their respective directories and files as well. All IDs regardless of type must be unique!
"baseversion": "99w99z", # Will be the same as id for vanilla versions, otherwise specifies the Minecraft version the custom version was derived from
"type": "custom", # Either "vanilla" or "custom"
"params": "-Xmx512M", # Java parameters to pass in
"notes": "" # User-created notes about the version
},
# Keep repeating
]

Instance JSON format:
{
"notes": "", # Notes about the instance
"vanillaversions": ["1.5.2", "13w22a", "1.5.1"], # Vanilla versions available to run
"customversions": ["1.5.2_Optifine", "13w22a_NoHorses"] # Custom versions available to run
}

Software Design Plan:
-First launch
	-User sees menubar at top
		-Manage Minecraft versions
			-Custom and vanilla ones
			-Download vanilla minecrafts
			-Manage custom libraries
		-Help menu
			-License!
	-User sees list of instances from a welcome tab and choose one
		-New tab opens for that instance
			-Select a Minecraft to launch (custom or vanilla)
			-Optionally log-in below the list of Minecrafts
			-Launch button!
			-Do not allow multiple Minecrafts to launch on one instance
			-Show console?
			-After closing
				-Let players select a different Minecraf to launch
				-